{"version":3,"sources":["shared/context/auth-context.js","shared/components/UIElements/LoadingSpinner.js","shared/components/UIElements/Backdrop.js","shared/hooks/auth-hook.js","shared/components/Navigation/MainHeader.js","shared/components/Navigation/NavLinks.js","shared/components/Navigation/SideDrawer.js","shared/components/Navigation/MainNavigation.js","App.js","serviceWorker.js","index.js"],"names":["AuthContext","createContext","isLoggedIn","userId","token","login","logout","LoadingSpinner","props","className","asOverlay","Backdrop","ReactDOM","createPortal","onClick","document","getElementById","logoutTimer","MainHeader","children","NavLinks","auth","useContext","to","exact","SideDrawer","content","CSSTransition","in","show","timeout","classNames","mountOnEnter","unmountOnExit","MainNavigation","useState","drawerIsOpen","setDrawerIsOpen","closeDrawerHandler","Fragment","Users","React","lazy","NewPlace","UserPlaces","UpdatePlace","Auth","App","routes","setToken","tokenExpirationDateState","setTokenExpirationDateState","setUserId","useCallback","uid","expirationDate","tokenExpirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","removeItem","useEffect","remainingTime","setTimeout","clearTimeout","storedData","parse","getItem","useAuth","path","Provider","value","fallback","Boolean","window","location","hostname","match","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8a9d7255.chunk.js","sourcesContent":["import  { createContext } from 'react';\n\n// A context Provider for React that makes the call to your server to fetch the user as well as validates the user on every visit.\n// More: https://www.npmjs.com/package/react-authentication-context\n\nexport const AuthContext = createContext({\n    isLoggedIn: false,\n    userId: null,\n    token: null,\n    login: () => {},\n    logout: () => {}\n});","import React from 'react';\n\nimport './LoadingSpinner.css';\n\nconst LoadingSpinner = props => {\n  return (\n    <div className={`${props.asOverlay && 'loading-spinner__overlay'}`}>\n      <div className=\"lds-dual-ring\"></div>\n    </div>\n  );\n};\n\nexport default LoadingSpinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './Backdrop.css';\n\n/* \n  Background state action\n  Create portal on silde drawer that allows to perform action.\n */\nconst Backdrop = props => {\n  return ReactDOM.createPortal(\n    <div className=\"backdrop\" onClick={props.onClick}></div>,\n    document.getElementById('backdrop-hook')\n  );\n};\n\nexport default Backdrop;\n","import { useState, useCallback, useEffect } from 'react';\n\nlet logoutTimer;\n\nexport const useAuth = () => {\n  const [token, setToken] = useState(false);\n  const [tokenExpirationDateState, setTokenExpirationDateState] = useState();\n  const [userId, setUserId] = useState(false);\n\n  // useCallback() only runs once\n  const login = useCallback((uid, token, expirationDate) => {\n    setToken(token);\n    // check login credential whether has expirationDate, if not, create new date.\n    const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60); // generate current plue 1 hour.\n    setTokenExpirationDateState(tokenExpirationDate);\n    // store token into local storage\n    localStorage.setItem(\n      'userData', \n      JSON.stringify({ \n        userId: uid, \n        token: token, \n        expiration: tokenExpirationDate.toISOString() // ensure no data get lost when data is stringifying.\n      })\n    );\n    setUserId(uid);\n  }, []);\n\n  const logout = useCallback(() => {\n    setToken(null);\n    setTokenExpirationDateState(null);\n    setUserId(null);\n    localStorage.removeItem('userData');\n  }, []);\n\n  useEffect(() => {\n    if (token && tokenExpirationDateState) {\n      const remainingTime = tokenExpirationDateState.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remainingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDateState]);\n  // useEffect() runs after render cycle\n  useEffect(() => {\n    const storedData= JSON.parse(localStorage.getItem('userData')); // extract token from local storage and parse JSON data to JavaScript data.\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      login(storedData.userId, storedData.token);\n    }\n  }, [login]);\n\n  return { token, login, logout, userId };\n};","import React from 'react';\n\nimport './MainHeader.css';\n\n/* \n    Header display\n */\nconst MainHeader = props => {\n    return <header className=\"main-header\">\n        {props.children}\n    </header>;\n};\n\nexport default MainHeader;","import React, { useContext } from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { AuthContext } from '../../context/auth-context';\nimport './NavLinks.css';\n\n/* \n    Navigation link change\n */\nconst NavLinks = props => {\n  // pass AuthContext, listen to changes\n  const auth = useContext(AuthContext);\n\n  return <ul className=\"nav-links\">\n    <li>\n      <NavLink to=\"/\" exact>ALL USERS</NavLink>\n    </li>\n    {auth.isLoggedIn && (\n      <li>\n        <NavLink to={`/${auth.userId}/places`}>MY PLACES</NavLink>\n      </li>\n    )}\n    {auth.isLoggedIn && (\n      <li>\n        <NavLink to=\"/places/new\">ADD PLACE</NavLink>\n      </li>\n    )}\n    {!auth.isLoggedIn && (\n      <li>\n        <NavLink to=\"/auth\">AUTHENTICATE</NavLink>\n      </li>\n    )}\n    {auth.isLoggedIn &&  (\n      <li>\n        <button onClick={auth.logout}>LOGOUT</button>\n      </li>\n    )}\n  </ul>\n};\n\nexport default NavLinks;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { CSSTransition } from 'react-transition-group';\n\nimport './SideDrawer.css';\n\n/* \n    Side bar display\n    CSSTransition: CSSTransition applies a pair of class names during the appear , enter , and exit states of the transition.\n    Portal: ReactDOM.createPortal(child, container); Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.\n */\nconst SideDrawer = props => {\n  const content = (\n    <CSSTransition\n      in={props.show}\n      timeout={200}\n      classNames=\"slide-in-left\"\n      mountOnEnter\n      unmountOnExit\n    >\n      <aside className=\"side-drawer\" onClick={props.onClick}>{props.children}</aside>\n    </CSSTransition>\n  );\n\n  return ReactDOM.createPortal(content, document.getElementById('drawer-hook'));\n};\n\nexport default SideDrawer;\n","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\n\nimport MainHeader from './MainHeader';\nimport NavLinks from './NavLinks';\nimport SideDrawer from './SideDrawer';\nimport Backdrop from '../UIElements/Backdrop';\nimport './MainNavigation.css';\n\n/* \n  Main navigation bar content display\n  useState controls: drawerIsOpen, setDrawerOpen\n  When onClick moblie nav, header navgiation bar shows; when onClick background(Backdrop.js) or SideDrawer, header navigation closes\n  <React.Fragment>: handle multiple components\n  <SideDrawer>: moblie side bar nav\n */\nconst MainNavigation = props => {\n  const [drawerIsOpen, setDrawerIsOpen] = useState(false);\n\n  const openDrawerHandler = () => {\n    setDrawerIsOpen(true);\n  };\n\n  const closeDrawerHandler = () => {\n    setDrawerIsOpen(false);\n  };\n\n  return (\n    <React.Fragment>\n      {drawerIsOpen && <Backdrop onClick={closeDrawerHandler} />}\n      <SideDrawer show={drawerIsOpen} onClick={closeDrawerHandler}>\n        <nav className=\"main-navigation__drawer-nav\">\n          <NavLinks />\n        </nav>\n      </SideDrawer>\n\n      <MainHeader>\n        <button className=\"main-navigation__menu-btn\" onClick={openDrawerHandler}>\n          <span />\n          <span />\n          <span />\n        </button>\n        <h1 className=\"main-navigation__title\">\n          <Link to=\"/\">YourPlaces</Link>\n        </h1>\n        <nav className=\"main-navigation__header-nav\">\n          <NavLinks />\n        </nav>\n      </MainHeader>\n    </React.Fragment>\n  );\n};\n\nexport default MainNavigation;\n","import React, { Suspense } from 'react';\n//import './App.css';\n\n// Export and define path components\nimport { BrowserRouter as Router, Route, Redirect, Switch, } from 'react-router-dom';\n\n// import Users from './user/pages/Users';\n// import NewPlace from './places/pages/NewPlace';\n// import UserPlaces from './places/pages/UserPlaces';\n// import UpdatePlace from './places/pages/UpdatePlace';\n// import Auth from './user/pages/Auth';\nimport MainNavigation from './shared/components/Navigation/MainNavigation';\nimport LoadingSpinner from './shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from './shared/context/auth-context';\nimport { useAuth } from './shared/hooks/auth-hook';\n// read all router dom url contents set up: npm install --save react-router-dom\n\n// produce minimum production chunks file size.\nconst Users = React.lazy(() => import('./user/pages/Users'));\nconst NewPlace = React.lazy(() => import('./places/pages/NewPlace'));\nconst UserPlaces = React.lazy(() => import('./places/pages/UserPlaces'));\nconst UpdatePlace = React.lazy(() => import('./places/pages/UpdatePlace'));\nconst Auth = React.lazy(() => import('./user/pages/Auth'));\n\nconst App = () => {\n  const { token, login, logout, userId } = useAuth(); // auth hook.\n\n  let routes;\n  if (token) {\n    routes = (\n      // Switch component is to handle redirect action. If '/' has following path, it will not redirect back. Otherwise.\n      <Switch>\n        {/* The Route path will depend on '/'. Here we use 'exact' to only slash will work */}\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/places/new\" exact>\n          <NewPlace />\n        </Route>\n        <Route path=\"/places/:placeId\" exact>\n          <UpdatePlace />\n        </Route>\n        {/* If the route path is not '/', then redirect to '/' */}\n        <Redirect to=\"/\" />\n      </Switch>\n    );\n  } else {\n    routes = (\n      <Switch>\n        <Route path=\"/\" exact>\n          <Users />\n        </Route>\n        <Route path=\"/:userId/places\" exact>\n          <UserPlaces />\n        </Route>\n        <Route path=\"/auth\" exact>\n          <Auth />\n        </Route>\n        <Redirect to=\"/auth\" />\n      </Switch>\n    )\n  }\n\n  return (\n    // blind onchange new value and all routes listen to changes before redirect\n    // \n    <AuthContext.Provider\n      value={{ \n        isLoggedIn: !!token, // can be true or null.\n        token: token,\n        userId: userId,\n        login: login, \n        logout: logout \n      }}\n    >\n      <Router>\n        <MainNavigation />\n        <main>\n          <Suspense \n            fallback={\n              <div className=\"center\">\n                <LoadingSpinner />\n              </div>\n            }\n          >\n            {routes}\n          </Suspense>\n        </main>\n      </Router>\n    </AuthContext.Provider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}