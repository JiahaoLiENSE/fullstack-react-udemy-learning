{"version":3,"sources":["shared/components/UIElements/Card.js","shared/components/UIElements/Map.js","places/components/PlaceItem.js","places/components/PlaceList.js","places/pages/UserPlaces.js"],"names":["Card","props","className","style","children","Map","mapRef","useRef","center","zoom","useEffect","window","ol","target","current","id","layers","layer","Tile","source","OSM","view","View","proj","fromLonLat","lng","lat","ref","PlaceItem","auth","useContext","AuthContext","useHttpClient","isLoading","error","sendRequest","clearError","useState","showMap","setShowMap","showConfirmModal","setShowConfirmModal","closeMapHandler","cancelDeleteHandler","confirmDeleteHandler","a","process","Authorization","token","onDelete","Fragment","ErrorModal","onClear","Modal","show","onCancel","header","address","contentClass","footerClass","footer","Button","onClick","coordinates","inverse","danger","LoadingSpinner","asOverlay","src","image","alt","title","description","userId","creatorId","to","PlaceList","items","length","map","place","key","creator","location","onDeletePlace","UserPlaces","loadedPlaces","setLoadedPlaces","history","useHistory","useParams","responseData","places","push","fetchPlaces","deletedPlaceId","prevPlaces","filter"],"mappings":"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","file":"static/js/7.9063fcb3.chunk.js","sourcesContent":["import React from 'react';\n\nimport './Card.css';\n\n/* \n  Card container style\n */\nconst Card = props => {\n  return (\n    <div className={`card ${props.className}`} style={props.style}>\n      {props.children}\n    </div>\n  );\n};\n\nexport default Card;\n","import React, { useRef, useEffect } from 'react';\n     \nimport './Map.css';\n \n/* \n    Map function(OpenStreetMap - free map api)\n    useRef: is nice as you can set references directly in your function components.\n    useEffect: you tell React that your component needs to do something after render. \n                React will remember the function you passed (we’ll refer to it as our “effect”), \n                and call it later after performing the DOM updates.\n                reference(https://reactjs.org/docs/hooks-reference.html#useeffect)\n */\nconst Map = props => {\n  const mapRef = useRef();\n  \n  const { center, zoom } = props;\n \n  useEffect(() => {\n    new window.ol.Map({\n      target: mapRef.current.id,\n      layers: [\n        new window.ol.layer.Tile({\n          source: new window.ol.source.OSM()\n        })\n      ],\n      view: new window.ol.View({\n        center: window.ol.proj.fromLonLat([center.lng, center.lat]),\n        zoom: zoom\n      })\n    });\n  }, [center, zoom]);\n \n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n      id=\"map\"\n    ></div>\n  );\n};\n \nexport default Map;\n\n// Google Map API reference\n/* \n  const Map = props => {\n  const mapRef = useRef();\n  \n  const { center, zoom } = props;\n\n  useEffect(() => {\n    const map = new window.google.maps.Map(mapRef.current, {\n      center: center,\n      zoom: zoom\n    });\n  \n    new window.google.maps.Marker({ position: center, map: map });\n  }, [center, zoom]);  \n\n  return (\n    <div\n      ref={mapRef}\n      className={`map ${props.className}`}\n      style={props.style}\n    ></div>\n  );\n};\n */","import React, { useState, useContext } from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport Modal from '../../shared/components/UIElements/Modal';\nimport Map from '../../shared/components/UIElements/Map';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { AuthContext } from '../../shared/context/auth-context';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\nimport './PlaceItem.css';\n/* \n  Place detail info display area\n  Card container style.\n  Button style.\n  useState: showMap, setShowMap => onClick button, onCancel with Backdrop and modal footer CLOSE button.\n            showConfirmModal, setShowConfirmModal => onClick, onCancel function\n  Passing value to Modal attributes.\n */\nconst PlaceItem = props => {\n  const auth = useContext(AuthContext);\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const [showMap, setShowMap] = useState(false);\n  const [showConfirmModal, setShowConfirmModal] = useState(false);\n\n  const openMapHandler = () => setShowMap(true);\n\n  const closeMapHandler = () => setShowMap(false);\n\n  const showDeleteWarningHandler = () => {\n    setShowConfirmModal(true);\n  };\n\n  const cancelDeleteHandler = () => {\n    setShowConfirmModal(false);\n  };\n\n  const confirmDeleteHandler = async () => {\n    setShowConfirmModal(false);\n    try {\n      await sendRequest(\n        process.env.REACT_APP_BACKEND_URL + `/places/${props.id}`, \n        'DELETE',\n        null, // null body.\n        {\n          Authorization: 'Bearer ' + auth.token\n        }\n      );\n      props.onDelete(props.id);\n    } catch (err) {}\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      <Modal\n        show={showMap}\n        onCancel={closeMapHandler}\n        header={props.address}\n        contentClass=\"place-item__modal-content\"\n        footerClass=\"place-item__modal-actions\"\n        footer={<Button onClick={closeMapHandler}>CLOSE</Button>}\n      >\n        <div className=\"map-container\">\n          <Map center={props.coordinates} zoom={16} />\n        </div>\n      </Modal>\n      <Modal\n        show={showConfirmModal}\n        onCancel={cancelDeleteHandler}\n        header=\"Are you sure?\"\n        footerClass=\"place-item__modal-actions\"\n        footer={\n          <React.Fragment>\n            <Button inverse onClick={cancelDeleteHandler}>\n              CANCEL\n            </Button>\n            <Button danger onClick={confirmDeleteHandler}>\n              DELETE\n            </Button>\n          </React.Fragment>\n        }\n      >\n        <p>\n          Do you want to proceed and delete this place? Please note that it\n          can't be undone thereafter.\n        </p>\n      </Modal>\n      <li className=\"place-item\">\n        <Card className=\"place-item__content\">\n          {isLoading && <LoadingSpinner asOverlay/>}\n          <div className=\"place-item__image\">\n            <img src={`${process.env.REACT_APP_ASSET_URL}/${props.image}`} alt={props.title} />\n          </div>\n          <div className=\"place-item__info\">\n            <h2>{props.title}</h2>\n            <h3>{props.address}</h3>\n            <p>{props.description}</p>\n          </div>\n          <div className=\"place-item__actions\">\n            <Button inverse onClick={openMapHandler}>\n              VIEW ON MAP\n            </Button>\n            {auth.userId === props.creatorId && (\n              <Button to={`/places/${props.id}`}>EDIT</Button>\n            )}\n            {auth.userId === props.creatorId && (\n              <Button danger onClick={showDeleteWarningHandler}>\n                DELETE\n              </Button>\n            )}\n          </div>\n        </Card>\n      </li>\n    </React.Fragment>\n  );\n};\n\nexport default PlaceItem;\n","import React from 'react';\n\nimport Card from '../../shared/components/UIElements/Card';\nimport Button from '../../shared/components/FormElements/Button';\nimport PlaceItem from './PlaceItem';\nimport './PlaceList.css';\n\n/* \n  User info passing data\n  Check if user exit\n  Initialize variables and pass them into PlaceItem\n  map(): data collection method that generate unique key and values should match the key\n */\nconst PlaceList = props => {\n  if (props.items.length === 0) {\n    return (\n      <div className=\"place-list center\">\n        <Card>\n          <h2>No places found. Maybe create one?</h2>\n          <Button to=\"/places/new\">Share Place</Button>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <ul className=\"place-list\">\n      {props.items.map(place => (\n        <PlaceItem\n          key={place.id}\n          id={place.id}\n          image={place.image}\n          title={place.title}\n          description={place.description}\n          address={place.address}\n          creatorId={place.creator}\n          coordinates={place.location}\n          onDelete={props.onDeletePlace}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport default PlaceList;\n","import React, { useEffect, useState } from 'react';\nimport { useParams, useHistory } from 'react-router-dom';\n\nimport PlaceList from '../components/PlaceList';\nimport ErrorModal from '../../shared/components/UIElements/ErrorModal';\nimport LoadingSpinner from '../../shared/components/UIElements/LoadingSpinner';\nimport { useHttpClient } from '../../shared/hooks/http-hook';\n\n\nconst UserPlaces = () => {\n  const [loadedPlaces, setLoadedPlaces] = useState();\n  const { isLoading, error, sendRequest, clearError } = useHttpClient();\n  const history = useHistory();\n\n  const userId = useParams().userId;\n  \n  useEffect(() => {\n    const fetchPlaces = async () => {\n      try {\n        const responseData = await sendRequest(\n          `${process.env.REACT_APP_BACKEND_URL}/places/user/${userId}`\n        );\n        setLoadedPlaces(responseData.places);\n      } catch (err) {\n        history.push('/'); // or do nothing that will output error message.\n      }\n    };\n    fetchPlaces();\n  }, [sendRequest, userId, history]);\n\n  // reloading page after deleting place with id\n  const placeDeleteHandler = deletedPlaceId => {\n    setLoadedPlaces(prevPlaces => prevPlaces.filter(\n      place => place.id !== deletedPlaceId\n    ));\n  };\n\n  return (\n    <React.Fragment>\n      <ErrorModal error={error} onClear={clearError} />\n      {isLoading && (\n        <div className=\"center\">\n          <LoadingSpinner />\n        </div>\n      )}\n      {!isLoading && loadedPlaces && <PlaceList items={loadedPlaces} onDeletePlace={placeDeleteHandler}/>}\n    </React.Fragment>\n  );\n};\n\nexport default UserPlaces;"],"sourceRoot":""}